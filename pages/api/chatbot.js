import OpenAI from "openai";

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// 游댌 Simulerad dokument-s칬kning baserat p친 nyckelord
function getDocumentContext(userQuestion) {
  const docs = {
    andrahandsuthyrning: [
      "Andrahandsuthyrning kr칛ver godk칛nt fr친n Botrygg och f친r beviljas max 1 친r 친t g친ngen.",
      "Du m친ste ha beaktansv칛rda sk칛l, t.ex. studier eller arbete p친 annan ort.",
      "Totalt f친r du hyra ut i andra hand max 3 친r.",
    ],
    upps칛gning: [
      "Upps칛gningstiden 칛r alltid 3 m친nader fr친n n칛r upps칛gningen inkommer.",
      "Upps칛gningen b칬r ske via Mina sidor, men g친r ocks친 via e-post eller post.",
    ],
    parkering: [
      "Parkeringstillst친nd kr칛vs p친 vissa anl칛ggningar och ska vara synligt i bilen.",
      "Vid utflyttning ska P-tillst친nd l칛mnas tillbaka senast kl 12.00.",
    ],
    inflyttning: [
      "Tv친 personer fr친n Botrygg ska n칛rvara vid tilltr칛de.",
      "Nycklar kvitteras ut och inflyttningsprotokoll ska fyllas i.",
    ],
  };

  const lowerQ = userQuestion.toLowerCase();
  let context = [];

  for (const [topic, facts] of Object.entries(docs)) {
    if (lowerQ.includes(topic)) {
      context = context.concat(facts);
    }
  }

  return context;
}

export default async function handler(req, res) {
  if (req.method !== "POST") {
    return res.status(405).json({ message: "Only POST allowed" });
  }

  try {
    const { messages } = req.body;

    if (!messages || !Array.isArray(messages)) {
      return res.status(400).json({ message: "Missing or invalid messages array." });
    }

    const lastUserMessage = messages[messages.length - 1]?.content || "";
    const extraContext = getDocumentContext(lastUserMessage);

    const systemPrompt = {
      role: "system",
      content:
        "Du 칛r en trevlig, hj칛lpsam och professionell kundtj칛nstmedarbetare p친 Botrygg. Svara tydligt, korrekt och g칛rna med en personlig ton. Om du inte vet svaret p친 en fr친ga, s칛g att du inte 칛r s칛ker ist칛llet f칬r att gissa. H칛r 칛r dokumentinformation som du kan anv칛nda:\n\n" +
        extraContext.join("\n"),
    };

    const chat = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [systemPrompt, ...messages],
    });

    const reply = chat.choices[0].message.content;
    return res.status(200).json({ reply });
  } catch (error) {
    console.error("OpenAI API error:", error.message);
    return res.status(500).json({ reply: "Fel vid kontakt med GPT." });
  }
}
